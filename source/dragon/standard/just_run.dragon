[ compile, install and run program ]
dragon.just_run(sources !dragon.list, input !dragon.buffer)(result !dragon.buffer, error !dragon.buffer) = {
    [ get buffer of buffers ]
    dragon.list.calculate.content_buffer(sources)(sources.buffer)

    [ compile ]
    dragon.compiler.configure.default_compile()(settings)
    dragon.compiler.compile(sources.buffer, settings)(byte_code, debug_information, compilation_error)

    [ check for compilation error ]
    @print_compilation_error compilation_error:occured = {
        dragon.print.buffer_as_string(compilation_error:message)()
        dragon.print.new_line()()
        dragon.print.integer.unsigned(compilation_error:location:file_index)()
        dragon.print.new_line()()
        dragon.print.integer.unsigned(compilation_error:location:line_number)()
        dragon.print.new_line()()
        dragon.print.integer.unsigned(compilation_error:location:character_index)()
        dragon.print.new_line()()
        dragon.jump(dragon.always, @exit)()
    }

    [ open new context & install ]
    dragon.context.open()(context)
    dragon.context.install_program(context, byte_code)()

    [ pass input ]
    dragon.context.set.context_input(context, input)()

    [ run context ]
    dragon.set(dragon.integer.n1)(instruction_count)
    dragon.context.run(context, instruction_count)()

    [ get outputs and results ]
    dragon.context.get.context_result(context)(result)
    dragon.context.get.context_error(context)(error)

    [ clean up context ]
    dragon.buffer.return(context)()

    [ clean up program ]
    dragon.buffer.return(byte_code)()

    [ exit ]
    @exit
}

[ test one file ]
dragon.just_run.one_file(file_path !dragon.buffer, input !dragon.buffer)(result !dragon.buffer, error !dragon.buffer) = {
    [ load file ]
    dragon.file_to_buffer(file_path)(user_code)

    [ open list ]
    dragon.structure.byte_size(user_code)(files.byte_size)
    dragon.list.open(files.byte_size)(files)

    [ append buffer ]
    dragon.list.append.buffer(files, user_code)(files)

    [ run test ]
    dragon.just_run(files, input)(result, error)

    [ clean up file ]
    dragon.buffer.return(user_code)()

    [ clean up files ]
    dragon.list.close(files)()
}
