[ print new line ]
dragon.print.new_line()() = {
    dragon.set(dragon.hexadecimal.0A)(new_line)
    dragon.print.character(new_line)()
}

[ print new line(s) ]
dragon.print.new_line(count !dragon.cell)() = {
    [ check remaining iterations ]
    dragon.integer.within_range(dragon.constant.0, count, dragon.constant.0)(quit, continue)
    dragon.jump.bottom(quit, @dragon.master_scope)()

    [ print ]
    dragon.print.new_line()()

    [ subtract ]
    dragon.integer.subtract(count, dragon.constant.1)(count)

    [ to top of loop ]
    dragon.jump.top(dragon.always, @dragon.master_scope)()
}

[ print tabs ]
dragon.print.tabs(tab_count !dragon.cell)() = {
    [ set tab ]
    dragon.set(dragon.hexadecimal.09)(tab)

    [ print tabs until finished ]
    @loop dragon.always = {
        [ check for more characters ]
        dragon.integer.within_range(dragon.constant.0, tab_count, dragon.constant.0)(finished, unfinished)
        dragon.jump.bottom(finished, @loop)()

        [ print tab ]
        dragon.print.character(tab)()

        [ next index ]
        dragon.integer.subtract(tab_count, dragon.constant.1)(tab_count)

        [ jump to loop start ]
        dragon.jump.top(dragon.always, @loop)()
    }
}

[ print a buffer as a set of two addresses ]
dragon.print.buffer(buffer !dragon.buffer)() = {
    [ setup strings ]
    dragon.set("[ ")(header)
    dragon.set(", ")(separator)
    dragon.set(" ]")(footer)

    [ print buffer ]
    dragon.print.buffer_as_string(header)()
    dragon.print.integer.unsigned(buffer:start)()
    dragon.print.buffer_as_string(separator)()
    dragon.print.integer.unsigned(buffer:end)()
    dragon.print.buffer_as_string(footer)()
}

[ print a current ]
dragon.print.current(current !dragon.current)() = {
    [ setup strings ]
    dragon.set("[ ")(header)
    dragon.set(", ")(separator)
    dragon.set(" ]")(footer)

    [ print buffer ]
    dragon.print.buffer_as_string(header)()
    dragon.print.integer.unsigned(current:buffer:start)()
    dragon.print.buffer_as_string(separator)()
    dragon.print.integer.unsigned(current:buffer:end)()
    dragon.print.buffer_as_string(separator)()
    dragon.print.integer.unsigned(current:progress)()
    dragon.print.buffer_as_string(footer)()
}

[ print a buffer as a string ]
dragon.print.buffer_as_string(buffer !dragon.buffer)() = {
    [ setup current ]
    dragon.pack(buffer, buffer:start)(current_character !dragon.current)

    [ print characters ]
    @print dragon.always = {
        [ check for end of string ]
        dragon.current.within_range(current_character)(more_characters, out_of_characters)
        dragon.jump.bottom(out_of_characters, @print)()

        [ read character ]
        dragon.address_to_cell(current_character:progress, dragon.ascii_character.byte_size)(character, current_character:progress)

        [ print character ]
        dragon.print.character(character)()

        [ jump to loop start ]
        dragon.jump.top(dragon.always, @print)()
    }
}

[ print an unsigned integer ]
dragon.print.integer.unsigned(value !dragon.cell)() = {
    [ cast to string ]
    dragon.cast.cell_to_decimal_string.higher_to_lower(value)(string)

    [ print string ]
    dragon.print.buffer_as_string(string)()

    [ return string ]
    dragon.buffer.return(string)()
}

[ print a binary number ]
dragon.print.binary.lower_to_higher(value !dragon.cell)() = {
    [ cast to string ]
    dragon.cast.cell_to_binary_string.lower_to_higher(value)(string)

    [ print string ]
    dragon.print.buffer_as_string(string)()

    [ return string ]
    dragon.buffer.return(string)()
}

[ print a binary number ]
dragon.print.binary.higher_to_lower(value !dragon.cell)() = {
    [ cast to string ]
    dragon.cast.cell_to_binary_string.higher_to_lower(value)(string)

    [ print string ]
    dragon.print.buffer_as_string(string)()

    [ return string ]
    dragon.buffer.return(string)()
}
