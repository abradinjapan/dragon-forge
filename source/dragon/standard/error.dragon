[ error type ]
!dragon.error
(
    occured !dragon.cell,
    json !dragon.list
)

[ setup blank error ]
dragon.error.setup_blank()(error !dragon.error) = {
    [ not occured ]
    dragon.set(dragon.boolean.false)(error:occured)
    
    [ setup json message ]
    dragon.set("%22;error%22;: {%0A;%09;%22;occured%22;: false,%0A;%09;%22;message%22;: %22;No error occured.%22;%0A;}%0A;")(message)

    [ open list ]
    dragon.buffer.calculate.length(message)(increase)
    dragon.list.open(increase)(error:json)

    [ append message ]
    dragon.list.append.buffer_data(error:json, message)(error:json)
}

[ print if occured ]
dragon.error.print_if_occured(error !dragon.error)() = {
    [ check occurence ]
    @print error:occured = {
        [ print message ]
        dragon.list.calculate.content_buffer(error:json)(message)
        dragon.print.buffer_as_string(message)()
    }
}

[ close error ]
dragon.error.close(error !dragon.error)() = {
    [ deallocate error list ]
    dragon.list.close(error:json)()
}

[ convert compiler error to dragon error ]
dragon.error.convert_compiler_error_to_dragon_error(compiler_error !dragon.compiler.error)(dragon_error !dragon.error) = {
    [ copy status ]
    dragon.copy(compiler_error:occured)(dragon_error:occured)

    [ convert details ]
    [ TODO ]
}
